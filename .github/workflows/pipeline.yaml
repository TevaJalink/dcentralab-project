name: "Build and Deploy"

on:
  pull_request:
    types:
      - opened
      - closed
permissions:
      id-token: write # for oidc connection to aws
      contents: read # required for actions/checkout
      pull-requests: write # required for PR comments
      actions: read # needed for downloading artifacts

env:
  # used for the aws cred step
  aws_region: us-east-1

jobs:
  terraforn_plan:
    runs-on: ubuntu-latest

    # sets the defaults working directory to Terraform-Code
    defaults:
      run:
        working-directory: Terraform-Code
    
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
        # step to clone the git repo to the ubuntu machine
      - name: Git Checkout
        uses: actions/checkout@v3
        

        # configuring the credentials for terraform
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-OIDC-TERRAFORM
          aws-region: ${{ env.aws_region }} 

        # setup terrafrom version 1.3.6 on the ubuntu machine
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

        # formatting the code
      - name: Terraform Formate
        if: github.event.action == 'opened'
        id: fmt
        run: terraform fmt
      
      # step to initialize the terraform configuration
      - name: Terraform Initialize
        id: init
        run: terraform init

      # step to validate the terraform code
      - name: Terraform Validate
        if: github.event.action == 'opened'
        id: validate
        run: terraform validate -no-color

        # plan the terraform deployment
      - name: Terraform Plan
        if: github.event.action == 'opened'
        id: plan
        run: terraform plan -out=tfplan -no-color

        # upload the tfplan to be consumed later by the apply command
      - name: Upload Plan Artifact
        if: github.event.action == 'opened'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ github.event.pull_request.number }}
          path: Terraform-Code/tfplan

      - name: Show Terraform Plan
        if: github.event.action == 'opened'
        id: show-plan
        run: terraform show -no-color tfplan > plan.txt

        # comments the tfplan on the pr
      - name: Comment PR with Plan
        if: github.event.action == 'opened'
        uses: actions/github-script@v6.4.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('Terraform-Code/plan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `#### Terraform Plan for \`${{ github.head_ref }}\`\n\`\`\`hcl\n${plan}\n\`\`\``
            });
        

  terraform_apply:
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    needs: terraforn_plan

    # sets the defaults working directory to Terraform-Code
    defaults:
      run:
        working-directory: Terraform-Code

    steps: 
        # downloading the tf plan artifact
      - name: Download Plan Artifact
        uses: actions/download-artifact@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          name: tfplan-${{ github.event.pull_request.number }}
        
        # apply the terraform configuration
      - name: Terraform Apply
        run: terraform apply tfplan-${{ github.event.pull_request.number }} -auto-approve -no-color