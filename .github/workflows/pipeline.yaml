name: "Build and Deploy"

on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # for oidc connection to aws
      contents: read # required for actions/checkout
      pull-requests: write # required for PR comments

jobs:
  terraforn_plan:
    runs-on: ubuntu-latest

    # sets the defaults working directory to Terraform-Code
    defaults:
      run:
        working-directory: Terraform-Code

    steps:
        # step to clone the git repo to the ubuntu machine
      - name: Git Checkout
        uses: actions/checkout@v3

        # configuring the credentials for terraform
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-OIDC-TERRAFORM

        # setup terrafrom version 1.3.6 on the ubuntu machine
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

        # formatting the code
      - name: Terraform Formate
        id: fmt
        run: terraform fmt
      
      # step to initialize the terraform configuration
      - name: Terraform Initialize
        id: init
        run: terraform init

      # step to validate the terraform code
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

        # plan the terraform deployment
      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan -no-color
        if: github.event_name == 'pull_request'

        # upload the tfplan to be consumed later by the apply command
      - name: Upload Plan Artifact
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v2
        with:
          name: tfplan-${{ github.event.pull_request.number }}
          path: tfplan-${{ github.event.pull_request.number }}

        # comments the tfplan on the pr
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: dflook/terraform-plan@v1
        with:
          path: tfplan-${{ github.event.pull_request.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  terraform_apply:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # sets the defaults working directory to Terraform-Code
    defaults:
      run:
        working-directory: Terraform-Code

    steps:
        # download repo code
      - name: Checkout repository
        uses: actions/checkout@v3

        # configurs the terraform aws cred
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-OIDC-TERRAFORM

        # setup terrafrom version 1.3.6 on the ubuntu machine
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

        # download the tfplan file
      - name: Download Plan Artifact
        uses: actions/download-artifact@v2
        with:
          name: tfplan-${{ github.event.pull_request.number }}
          path: .
        
        # apply the terraform configuration
      - name: Terraform Apply
        run: terraform apply tfplan-${{ github.event.pull_request.number }} -auto-approve -no-color